
/*
 WooCommerce Apple Pay Handler
 Version 4.6.0-dev

 Copyright (c) 2016, SkyVerge, Inc.
 Licensed under the GNU General Public License v3.0
 http://www.gnu.org/licenses/gpl-3.0.html
 */

(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  jQuery(document).ready(function($) {
    "use strict";
    window.SV_WC_Apple_Pay_Handler = (function() {
      function SV_WC_Apple_Pay_Handler(args) {
        this.on_cancel_payment = bind(this.on_cancel_payment, this);
        this.process_authorization = bind(this.process_authorization, this);
        this.on_process_authorization = bind(this.on_process_authorization, this);
        this.validate_merchant = bind(this.validate_merchant, this);
        this.on_validate_merchant = bind(this.on_validate_merchant, this);
        this.get_payment_request = bind(this.get_payment_request, this);
        this.params = sv_wc_apple_pay_params;
        this.request_action = args.request_action;
        this.request_nonce = args.request_nonce;
        this.payment_request = args.payment_request;
        if (this.is_available()) {
          this.init();
        }
      }

      SV_WC_Apple_Pay_Handler.prototype.is_available = function() {
        if (!window.ApplePaySession) {
          return false;
        }
        return ApplePaySession.canMakePaymentsWithActiveCard(this.params.merchant_id).then((function(_this) {
          return function(canMakePayments) {
            return canMakePayments;
          };
        })(this));
      };

      SV_WC_Apple_Pay_Handler.prototype.init = function() {
        this.buttons = $('.sv-wc-apple-pay-button');
        if (!this.payment_request) {
          this.block_ui();
          this.get_payment_request().then((function(_this) {
            return function(response) {
              _this.payment_request = $.parseJSON(response);
              if (_this.payment_request) {
                _this.buttons.show().prop('disabled', false);
                return _this.unblock_ui();
              }
            };
          })(this), (function(_this) {
            return function(response) {
              console.log('[Apple Pay Error] ' + response);
              return _this.unblock_ui();
            };
          })(this));
        } else {
          this.buttons.show().prop('disabled', false);
        }
        $(document.body).off('click', '.sv-wc-apple-pay-button:not([disabled])');
        return $(document.body).on('click', '.sv-wc-apple-pay-button:not([disabled])', (function(_this) {
          return function(e) {
            var error;
            e.preventDefault();
            _this.block_ui();
            try {
              _this.session = new ApplePaySession(1, _this.payment_request);
              _this.session.onvalidatemerchant = function(event) {
                return _this.on_validate_merchant(event);
              };
              _this.session.onpaymentauthorized = function(event) {
                return _this.on_process_authorization(event);
              };
              _this.session.oncancel = function(event) {
                return _this.on_cancel_payment(event);
              };
              return _this.session.begin();
            } catch (_error) {
              error = _error;
              return _this.fail_payment(error);
            }
          };
        })(this));
      };

      SV_WC_Apple_Pay_Handler.prototype.get_payment_request = function() {
        return new Promise((function(_this) {
          return function(resolve, reject) {
            var data;
            data = {
              'action': _this.request_action,
              'nonce': _this.request_nonce,
              'product_id': _this.product_id
            };
            return $.post(_this.params.ajax_url, data, function(response) {
              if (response.result === 'success') {
                return resolve(response.request);
              } else {
                return reject(response.message);
              }
            });
          };
        })(this));
      };

      SV_WC_Apple_Pay_Handler.prototype.on_validate_merchant = function(event) {
        return this.validate_merchant(event.validationURL).then((function(_this) {
          return function(merchant_session) {
            merchant_session = $.parseJSON(merchant_session);
            return _this.session.completeMerchantValidation(merchant_session);
          };
        })(this), (function(_this) {
          return function(error) {
            _this.session.abort();
            return _this.fail_payment('Merchant could no be validated. ' + error);
          };
        })(this));
      };

      SV_WC_Apple_Pay_Handler.prototype.validate_merchant = function(url) {
        return new Promise((function(_this) {
          return function(resolve, reject) {
            var data;
            data = {
              'action': 'sv_wc_apple_pay_validate_merchant',
              'nonce': _this.params.validate_nonce,
              'merchant_id': _this.params.merchant_id,
              'url': url
            };
            return $.post(_this.params.ajax_url, data, function(response) {
              if (response.result === 'success') {
                return resolve(response.merchant_session);
              } else {
                return reject(response.message);
              }
            });
          };
        })(this));
      };

      SV_WC_Apple_Pay_Handler.prototype.on_process_authorization = function(event) {
        return this.process_authorization(event.payment).then((function(_this) {
          return function(response) {
            _this.set_payment_status(response.result);
            return _this.complete_purchase(response);
          };
        })(this), (function(_this) {
          return function(error) {
            _this.set_payment_status(false);
            return _this.fail_payment('Payment could no be processed. ' + error);
          };
        })(this));
      };

      SV_WC_Apple_Pay_Handler.prototype.process_authorization = function(payment) {
        return new Promise((function(_this) {
          return function(resolve, reject) {
            var data;
            data = {
              action: 'sv_wc_apple_pay_process_payment',
              nonce: _this.params.process_nonce,
              type: _this.type,
              payment: JSON.stringify(payment)
            };
            return $.post(_this.params.ajax_url, data, function(response) {
              if (response.result === 'success') {
                return resolve(response);
              } else {
                return reject(response.message);
              }
            });
          };
        })(this));
      };

      SV_WC_Apple_Pay_Handler.prototype.on_cancel_payment = function(event) {
        return this.unblock_ui();
      };

      SV_WC_Apple_Pay_Handler.prototype.complete_purchase = function(response) {
        return window.location = response.redirect;
      };

      SV_WC_Apple_Pay_Handler.prototype.fail_payment = function(error) {
        console.log('[Apple Pay Error] ' + error);
        this.unblock_ui();
        return this.render_errors([this.params.generic_error]);
      };

      SV_WC_Apple_Pay_Handler.prototype.set_payment_status = function(result) {
        var status;
        if (result === 'success') {
          status = ApplePaySession.STATUS_SUCCESS;
        } else {
          status = ApplePaySession.STATUS_FAILURE;
        }
        return this.session.completePayment(status);
      };

      SV_WC_Apple_Pay_Handler.prototype.render_errors = function(errors) {
        $('.woocommerce-error, .woocommerce-message').remove();
        this.payment_form.prepend('<ul class="woocommerce-error"><li>' + errors.join('</li><li>') + '</li></ul>');
        this.payment_form.removeClass('processing').unblock();
        return $('html, body').animate({
          scrollTop: this.payment_form.offset().top - 100
        }, 1000);
      };

      SV_WC_Apple_Pay_Handler.prototype.block_ui = function() {
        return this.payment_form.addClass('processing').block({
          message: null,
          overlayCSS: {
            background: '#fff',
            opacity: 0.6
          }
        });
      };

      SV_WC_Apple_Pay_Handler.prototype.unblock_ui = function() {
        return this.payment_form.removeClass('processing').unblock();
      };

      return SV_WC_Apple_Pay_Handler;

    })();
    window.SV_WC_Apple_Pay_Cart_Handler = (function(superClass) {
      extend(SV_WC_Apple_Pay_Cart_Handler, superClass);

      function SV_WC_Apple_Pay_Cart_Handler(args) {
        this.type = 'cart';
        this.payment_form = $('.cart_totals');
        SV_WC_Apple_Pay_Cart_Handler.__super__.constructor.call(this, args);
        $(document.body).on('updated_cart_totals', (function(_this) {
          return function() {
            _this.payment_request = false;
            return _this.init();
          };
        })(this));
      }

      return SV_WC_Apple_Pay_Cart_Handler;

    })(SV_WC_Apple_Pay_Handler);
    window.SV_WC_Apple_Pay_Checkout_Handler = (function(superClass) {
      extend(SV_WC_Apple_Pay_Checkout_Handler, superClass);

      function SV_WC_Apple_Pay_Checkout_Handler(args) {
        this.type = 'checkout';
        this.payment_form = $('form.woocommerce-checkout');
        SV_WC_Apple_Pay_Checkout_Handler.__super__.constructor.call(this, args);
        $(document.body).on('update_checkout', (function(_this) {
          return function() {
            _this.payment_request = false;
            return _this.init();
          };
        })(this));
      }

      return SV_WC_Apple_Pay_Checkout_Handler;

    })(SV_WC_Apple_Pay_Handler);
    return window.SV_WC_Apple_Pay_Product_Handler = (function(superClass) {
      extend(SV_WC_Apple_Pay_Product_Handler, superClass);

      function SV_WC_Apple_Pay_Product_Handler(args) {
        this.type = 'product';
        this.payment_form = $('form.cart');
        SV_WC_Apple_Pay_Product_Handler.__super__.constructor.call(this, args);
      }

      return SV_WC_Apple_Pay_Product_Handler;

    })(SV_WC_Apple_Pay_Handler);
  });

}).call(this);

//# sourceMappingURL=sv-wc-payment-gateway-apple-pay.min.js.map
